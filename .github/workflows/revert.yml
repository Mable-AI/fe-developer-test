name: Revert Latest Release

on:
  workflow_dispatch:

jobs:
  revert:
    runs-on: ubuntu-latest
    env:
      WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
      DOCKER_IMAGE_TAG: ${{ github.event.repository.name }}

    steps:
      - name: Set up GitHub CLI
        run: |
          echo "${{ secrets.WORKFLOW_TOKEN }}" | gh auth login --with-token

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: 0 # Ensures we fetch all history

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm
          pnpm install  # Install dependencies, including tsup

      - name: Build with tsup
        run: pnpm run build

      - name: Get latest valid release tag
        id: get_latest_valid_release
        run: |
          releases=$(gh release list --limit 100 | awk -F'\t' '{print $3}')
          echo "Fetched releases:"
          echo "$releases"

          latest_valid_release=""
          previous_valid_release=""

          # Iterate through the list of releases
          while IFS= read -r tag; do
            echo "Processing tag: $tag"
            if [[ -n "$tag" && "$tag" != *"-rc."* && "$tag" != *"-tc."* ]]; then
              if [[ -z "$latest_valid_release" ]]; then
                latest_valid_release=$tag
              elif [[ -z "$previous_valid_release" ]]; then
                previous_valid_release=$tag
                break
              fi
            fi
          done <<< "$releases"

          if [[ -z "$latest_valid_release" || -z "$previous_valid_release" ]]; then
            echo "Valid release tags not found."
            exit 1
          fi

          echo "LATEST_VALID_RELEASE_TAG=${latest_valid_release}" >> $GITHUB_ENV
          echo "PREVIOUS_VALID_RELEASE_TAG=${previous_valid_release}" >> $GITHUB_ENV

      - name: Print tags
        run: |
          echo "Latest valid release tag is ${{ env.LATEST_VALID_RELEASE_TAG }}"
          echo "Previous valid release tag is ${{ env.PREVIOUS_VALID_RELEASE_TAG }}"

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          TOKEN=$(echo "${{ secrets.WORKFLOW_TOKEN }}" | tr -d '\n')
          git remote set-url origin https://${TOKEN}@github.com/${{ github.repository }}.git

      - name: Delete latest release on GitHub
        run: gh release delete ${{ env.LATEST_VALID_RELEASE_TAG }} --yes

      - name: Delete latest release tag on GitHub
        run: gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/${{ env.LATEST_VALID_RELEASE_TAG }}

      - name: Fetch and reset master branch
        run: |
          # Fetch all branches and tags
          git fetch --all

          # Get the commit hash of the previous valid release tag
          PREVIOUS_VALID_COMMIT=$(git rev-list -n 1 ${PREVIOUS_VALID_RELEASE_TAG})

          # Checkout the master branch
          git checkout master
          Â 
          # Ensure the working directory is clean
          git reset --hard

          # Reset the master branch to the previous valid commit hash
          git reset --hard ${PREVIOUS_VALID_COMMIT}

          # Force push the reset master branch to the remote repository
          git push origin master --force-with-lease

      - name: Delete package from npm registry
        run: |
          # Authenticate with npm
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@Mable-AI:registry=https://npm.pkg.github.com" >> ~/.npmrc
          git status
          git add package.json pnpm-lock.yaml
          git commit -m "fix: version bump"
          # Delete the published package
          npm unpublish --force hound@${PREVIOUS_VALID_RELEASE_TAG}
