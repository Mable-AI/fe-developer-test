name: Promote Release

on:
  workflow_dispatch:
    inputs:
      source_tag:
        description: "Tag to promote"
        required: true

jobs:
  promote:
    runs-on: ubuntu-latest
    env:
      WORKFLOW_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}
          fetch-depth: 0 # Ensures we fetch all history

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm
          pnpm install  # Install dependencies, including tsup

      - name: Build with tsup
        run: pnpm run build

      - name: Set up Git and GitHub CLI
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          echo "${{ secrets.WORKFLOW_TOKEN }}" | gh auth login --with-token

      - name: Fetch tags and checkout the source tag
        run: |
          # Fetch all tags
          git fetch --tags
          # Checkout the source tag
          git checkout tags/${{ github.event.inputs.source_tag }}

      - name: Determine new tag
        id: determine-new-tag
        run: |
          source_tag="${{ github.event.inputs.source_tag }}"
          if [[ "$source_tag" =~ -tc\. ]]; then
            BASE_TAG=$(echo "$source_tag" | sed 's/-tc\..*//')
            NEW_TAG="${BASE_TAG}-rc.$(date +%s)"
            echo "target_environment=RC" >> $GITHUB_ENV
          elif [[ "$source_tag" =~ -rc\. ]]; then
            BASE_TAG=$(echo "$source_tag" | sed 's/-rc\..*//')
            NEW_TAG="$BASE_TAG"
            echo "target_environment=Release" >> $GITHUB_ENV
          else
            echo "::error ::Unsupported source tag format"
            exit 1
          fi
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Print New Tag for Debugging
        run: echo "New tag is ${{ env.NEW_TAG }}"

      - name: Publish to GitHub Package Registry
        id: publish_to_gpr
        run: |
          echo "Publishing to GitHub Package Registry"
          echo "Target environment is ${{ env.target_environment }}"
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@Mable-AI:registry=https://npm.pkg.github.com" >> ~/.npmrc
          git status
          git add package.json pnpm-lock.yaml
          git commit -m "fix: version bump"
          if [[ "$target_environment" == "RC" ]]; then
            npm version $NEW_TAG --preid=beta
          elif [[ "$target_environment" == "Release" ]]; then
            npm version $NEW_TAG
          else
            echo "::error ::Unsupported source tag format"
            exit 1
          fi
          npm publish

      - name: Push the new tag
        run: |
          # Create the new tag
          git tag $NEW_TAG
          # Push the new tag to the remote repository
          git push origin $NEW_TAG

      - name: Run Chromatic
        uses: chromaui/action@latest
        with:
          exitZeroOnChanges: true
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

      - name: Print Environment Variables
        run: |
          echo "TARGET_BRANCH: $TARGET_BRANCH"
          echo "SOURCE_BRANCH: $SOURCE_BRANCH"

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const targetTag = process.env.NEW_TAG;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tags = await github.rest.repos.listTags({
              owner,
              repo,
              per_page: 100
            });
            const latestRCTag = tags.data.find(tag => tag.name.includes('-rc.') && tag.name !== targetTag);
            const latestReleaseTag = tags.data.find(tag => !tag.name.includes('-tc.') && !tag.name.includes('-rc.') && tag.name !== targetTag);
            const createComparisonUrl = (base, head) => `https://github.com/${owner}/${repo}/compare/${base}...${head}`;
            const diffs = [];
            if (latestRCTag) {
              diffs.push(`- [Diff from last RC](${createComparisonUrl(latestRCTag.name, targetTag)})`);
            }
            if (latestReleaseTag) {
              diffs.push(`- [Diff from last Release](${createComparisonUrl(latestReleaseTag.name, targetTag)})`);
            }
            const body = `
            ### Changes in this release:
            ${diffs.length > 0 ? diffs.join('\n') : 'No previous tags found to compare.'}
            ### Commits:
            https://github.com/${owner}/${repo}/commits/${targetTag}
            `;
            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: targetTag,
              name: `Release ${targetTag}`,
              body,
              draft: false,
              prerelease: ${{ env.target_environment == 'RC' }},
              generate_release_notes: true
            });

      - name: Fetch Tag and Target Branch
        run: |
          git fetch origin ${{ env.TARGET_BRANCH }}
          git checkout ${{ env.TARGET_BRANCH }}
          git fetch origin tag ${{ github.event.inputs.source_tag }}

      - name: Rebase Target Branch to Tag
        run: |
          git rebase --onto ${{ github.event.inputs.source_tag }} $(git rev-list -n 1 ${{ github.event.inputs.source_tag }}^) ${{ env.TARGET_BRANCH }}
          git push origin ${{ env.TARGET_BRANCH }} --force-with-lease

      - name: Cleanup on failure
        if: failure()
        run: |
          gh release delete $NEW_TAG --yes
          gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/$NEW_TAG
