name: Create Testing Candidate (TC)

on:
  push:
    branches:
      - develop

jobs:
  create-tc:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GH_MABLE_OWNER_WRITE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm
          pnpm install  # Install dependencies, including tsup
          pnpm install --save-dev semver

      - name: Build with tsup
        run: pnpm run build

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Determine Release Type
        id: determine-release-type
        uses: actions/github-script@v6
        with:
          script: |
            const commitMessage = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            }).then(response => response.data.commit.message);

            let releaseType = 'patch';
            const match = commitMessage.match(/\((major|minor|patch)\)$/);
            if (match) {
              releaseType = match[1];
            }

            core.exportVariable('RELEASE_TYPE', releaseType);

      - name: Print Release Type for Debugging
        run: echo "Release type is ${{ env.RELEASE_TYPE }}"

      - name: Determine Next Version
        id: next_version
        run: |
          git fetch --tags
          git tag > all-tags.txt
          # Extract the base versions from tags, excluding the -tc suffix
          all_base_versions=$(grep -Eo '^[0-9]+\.[0-9]+\.[0-9]+' all-tags.txt | sort -V)
          if [ -z "$all_base_versions" ]; then
            LATEST_BASE_TAG="0.0.0"
          else
            LATEST_BASE_TAG=$(echo "$all_base_versions" | tail -n 1)
          fi
          # Increment the version based on the release type
          RELEASE_TYPE="${{ env.RELEASE_TYPE }}"
          NEXT_VERSION=$(npx semver "$LATEST_BASE_TAG" -i "$RELEASE_TYPE")
          TC_VERSION="$NEXT_VERSION-tc.$(date +%s)"
          echo "next_version=$TC_VERSION" >> $GITHUB_ENV

      - name: Publish to GitHub Package Registry
        id: publish_to_gpr
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@Mable-AI:registry=https://npm.pkg.github.com" >> ~/.npmrc
          git status
          git add package.json pnpm-lock.yaml src/components/index.tsx
          git commit -m "fix: version bump"
          npm version ${{ env.next_version }} --preid=alpha
          npm publish

      - name: Tag and Push
        run: |
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      - name: Run Chromatic
        uses: chromaui/action@latest
        with:
          exitZeroOnChanges: true
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/github-script@v6
        with:
          script: |
            const nextVersion = process.env.next_version;
            const tagName = nextVersion;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            // Get the latest tags for TC, RC, and release
            const tags = await github.rest.repos.listTags({
              owner,
              repo,
              per_page: 100
            });

            const latestTCTag = tags.data.find(tag => tag.name.includes('-tc.') && tag.name !== tagName);
            const latestRCTag = tags.data.find(tag => tag.name.includes('-rc.') && tag.name !== tagName);
            const latestReleaseTag = tags.data.find(tag => !tag.name.includes('-tc.') && !tag.name.includes('-rc.') && tag.name !== tagName);

            // Find the latest minor TC tag
            const currentMinorVersion = nextVersion.match(/^(\d+\.\d+)/)[1];
            const minorTCTags = tags.data.filter(tag => tag.name.includes('-tc.') && tag.name.startsWith(currentMinorVersion));
            const latestMinorTCTag = minorTCTags.sort((a, b) => {
              const [aVersion, aTC] = a.name.split('-tc.');
              const [bVersion, bTC] = b.name.split('-tc.');
              return parseInt(aTC) - parseInt(bTC);
            }).find(tag => tag.name !== tagName);

            const createComparisonUrl = (base, head) => `https://github.com/${owner}/${repo}/compare/${base}...${head}`;

            const diffs = [];
            if (latestTCTag) {
              diffs.push(`- [Diff from last TC](${createComparisonUrl(latestTCTag.name, tagName)})`);
            }
            if (latestMinorTCTag) {
              diffs.push(`- [Diff from last minor TC](${createComparisonUrl(latestMinorTCTag.name, tagName)})`);
            }
            if (latestRCTag) {
              diffs.push(`- [Diff from last RC](${createComparisonUrl(latestRCTag.name, tagName)})`);
            }
            if (latestReleaseTag) {
              diffs.push(`- [Diff from last Release](${createComparisonUrl(latestReleaseTag.name, tagName)})`);
            }

            const body = `
            ### Changes in this release:
            ${diffs.length > 0 ? diffs.join('\n') : 'No previous tags found to compare.'}

            ### Commits:
            https://github.com/${owner}/${repo}/commits/${tagName}
            `;

            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `Testing Candidate ${nextVersion}`,
              body,
              draft: false,
              prerelease: true,
              generate_release_notes: true
            });

      - name: Cleanup Tag on Failure
        if: failure()
        run: |
          git tag -d ${{ env.next_version }}
          git push --delete origin ${{ env.next_version }}
